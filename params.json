{"name":"Lennon.js","tagline":"Lennon, a Javascript router","body":"# Lennon, A Javascript Router\r\n\r\nWhy another JS router you may ask?  Well, I was in need of an ***extremely*** lightweight router, that would take advantage of the History API and fallback to hash.  Most of the routers I came across, while wonderful projects in their own right, contained way more than I was looking for.  The project I was working on was already using [amplify.js](http://amplifyjs.com/), so I really just wanted to pass my router an event name to publish rather than a callback to run.\r\n\r\nSo, I wrote Lennon to do just that.  Define a few routes and tell it which event to publish (you can optionally pass a callback, as well) then run!\r\n\r\nIn a nutshell,\r\n<pre>\r\nvar router = new Lennon();\r\nrouter.define('/', 'myDefaultRoute');\r\nrouter.define('/another/:route', 'anotherRoute');\r\nrouter.process();\r\n</pre>\r\n\r\nWhen process is called, the passed event name would be dispatched on the matching route.  Granted, you have to pass a publish method to Lennon's constructor.  If you aren't using pub/sub, callbacks work all the same.\r\n<pre>\r\nvar router = new Lennon();\r\nrouter.define('/', function(context) {\r\n    //-- Do default route stuff\r\n});\r\nrouter.define('/another/:route', function(context) {\r\n    //-- Do stuff with context.route\r\n});\r\nrouter.process();\r\n</pre>\r\n\r\n### Dependencies\r\nModernizr, jQuery 1.8.6+\r\n\r\n### Constructor Options\r\n- **historyEnabled**: By default, uses the Modernizr.history property.  When true, Lennon uses the history pushState method when routing.  When false, Lennon will gracefully fallback to using the location hash instead.\r\n- **linkSelector**: A jQuery selector that is used to determine which links will cause the router to process when clicked.  By default, it is append on internal links only, `'a[target!=_blank]:not([href^=http])'`.  Of course, this will not apply to internal links that use a FQDN (http://somehost.com).\r\n- **logger**: An object that must consist of each of the following methods at the minimum: `error(params, …)`, `info(params, …)` and `warn(params, …)`.  By default, window.console is used.\r\n- **publishEvent**: If you pass a string to Lennon's define method, you must also provide a publish method that accepts a String as the first argument and an Object as the second argument.  Lennon will eventually call `publishEvent(eventName, context)` when a route is matched.\r\n\r\n### Creating the Lennon object\r\n<pre>\r\nvar router = new Lennon({\r\n    logger: myCustomLogger,\r\n    publishEvent: somePubSubLibrary.publish\r\n});\r\n</pre>\r\n\r\n### Defining routes\r\nYou can add dynamic route parameters by prefixing with a colon (/someModule/:id).  The context object will then parse the path value into a property called id.\r\n\r\n#### With callbacks\r\n<pre>\r\nrouter.define('/', function(context) {\r\n    //-- Do stuff\r\n});\r\n\r\nrouter.define('/some/:path', function(context) {\r\n    /*\r\n    This will match \"/some/param\" and context will be\r\n    {Object} => {\r\n        path: \"param\"\r\n    }\r\n    */\r\n});\r\n</pre>\r\n\r\n#### With pubsub\r\n<pre>\r\nrouter.define('/', 'defaultPathEventName');\r\nrouter.define('/some/:path', 'someOtherPathEventName');\r\n\r\nsomePubSubLibrary.subscribe('defaultPathEventName', function(context) {\r\n    //-- Do stuff\r\n});\r\nsomePubSubLibrary.subscribe('someOtherPathEventName', function(context) {\r\n    /*\r\n    This will match \"/some/param\" and context will be\r\n    {Object} => {\r\n        path: \"param\"\r\n    }\r\n    */\r\n});\r\n</pre>\r\n\r\n### See it in action\r\nJust a simple demo page to dynamically add routes and see how pushState or onhashchange responds to them.  [See it here](http://gabehayes.github.com/lennonjs/demo.html).\r\n\r\n### Future stuff\r\n- Make logging conditional.  Currently, the custom logger I am passing to it has a debug switch.\r\n- Default the historyEnabled property to standalone feature sniffing which removes the dependency on Modernizr.","google":"UA-38673453-1","note":"Don't delete this file! It's used internally to help with page regeneration."}